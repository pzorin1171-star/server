from flask import Flask, request
from flask_socketio import SocketIO
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['SECRET_KEY'] = 'online-tic-tac-toe-secret'

socketio = SocketIO(app, cors_allowed_origins="*")

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä
games = {}

@app.route('/')
def home():
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ ONLINE</title>
        <style>
            body { font-family: Arial; text-align: center; margin: 50px; }
            .board { display: inline-grid; grid-template-columns: repeat(3, 100px); gap: 5px; margin: 20px; }
            .cell { width: 100px; height: 100px; border: 2px solid #333; font-size: 40px; cursor: pointer; }
            .cell.x { color: red; }
            .cell.o { color: blue; }
            #status { margin: 20px; padding: 10px; background: #f0f0f0; }
            .online { background: #d4edda; }
            .offline { background: #f8d7da; }
        </style>
    </head>
    <body>
        <h1>üéÆ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ ONLINE</h1>
        <div id="status" class="offline">–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª—é—á–µ–Ω–æ</div>
        
        <div>
            <input type="text" id="gameId" value="game1" placeholder="ID –∏–≥—Ä—ã">
            <button onclick="connectToGame()">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</button>
        </div>
        
        <div class="board" id="board"></div>
        <div>–ò–≥—Ä–æ–∫: <span id="playerSymbol">-</span></div>
        <div>–•–æ–¥: <span id="currentTurn">-</span></div>
        
        <script src="https://cdn.socket.io/4.5.0/socket.io.min.js"></script>
        <script>
            let socket = null;
            let currentPlayer = '';
            let board = ['', '', '', '', '', '', '', '', ''];
            let gameId = '';
            let isMyTurn = false;
            
            function createBoard() {
                const boardElement = document.getElementById('board');
                boardElement.innerHTML = '';
                
                for (let i = 0; i < 9; i++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    cell.onclick = () => makeMove(i);
                    boardElement.appendChild(cell);
                }
                updateBoard();
            }
            
            function connectToGame() {
                gameId = document.getElementById('gameId').value || 'default';
                
                // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
                socket = io();
                
                socket.on('connect', () => {
                    document.getElementById('status').textContent = '–°—Ç–∞—Ç—É—Å: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É';
                    document.getElementById('status').className = 'online';
                    
                    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∏–≥—Ä–µ
                    socket.emit('join', { game_id: gameId });
                });
                
                socket.on('game_start', (data) => {
                    currentPlayer = data.symbol;
                    isMyTurn = currentPlayer === 'X';
                    document.getElementById('playerSymbol').textContent = currentPlayer;
                    document.getElementById('currentTurn').textContent = isMyTurn ? 'X (–í–∞—à —Ö–æ–¥)' : 'O (–•–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞)';
                    document.getElementById('currentTurn').style.color = isMyTurn ? 'green' : 'red';
                });
                
                socket.on('board_update', (data) => {
                    board = data.board;
                    isMyTurn = data.current_turn === currentPlayer;
                    updateBoard();
                    document.getElementById('currentTurn').textContent = isMyTurn ? 
                        currentPlayer + ' (–í–∞—à —Ö–æ–¥)' : 
                        (currentPlayer === 'X' ? 'O' : 'X') + ' (–•–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞)';
                    document.getElementById('currentTurn').style.color = isMyTurn ? 'green' : 'red';
                });
                
                socket.on('game_over', (data) => {
                    if (data.winner === 'draw') {
                        alert('–ù–∏—á—å—è!');
                    } else {
                        alert(data.winner === currentPlayer ? '–í—ã –ø–æ–±–µ–¥–∏–ª–∏!' : '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!');
                    }
                    setTimeout(resetGame, 2000);
                });
                
                socket.on('error', (data) => {
                    alert('–û—à–∏–±–∫–∞: ' + data.message);
                });
            }
            
            function makeMove(index) {
                if (isMyTurn && board[index] === '') {
                    socket.emit('move', {
                        game_id: gameId,
                        position: index,
                        symbol: currentPlayer
                    });
                }
            }
            
            function updateBoard() {
                const cells = document.querySelectorAll('.cell');
                cells.forEach((cell, index) => {
                    cell.textContent = board[index];
                    cell.className = `cell ${board[index]}`;
                    cell.style.cursor = isMyTurn && board[index] === '' ? 'pointer' : 'not-allowed';
                });
            }
            
            function resetGame() {
                socket.emit('restart', { game_id: gameId });
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            createBoard();
        </script>
    </body>
    </html>
    '''

@socketio.on('connect')
def handle_connect():
    logger.info(f'Client connected: {request.sid}')

@socketio.on('disconnect')
def handle_disconnect():
    logger.info(f'Client disconnected: {request.sid}')

@socketio.on('join')
def handle_join(data):
    game_id = data.get('game_id', 'default')
    
    if game_id not in games:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        games[game_id] = {
            'board': ['', '', '', '', '', '', '', '', ''],
            'players': {'X': request.sid, 'O': None},
            'current_turn': 'X',
            'status': 'waiting'
        }
        # –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç X
        socketio.emit('game_start', {'symbol': 'X'}, room=request.sid)
    else:
        game = games[game_id]
        if game['players']['O'] is None:
            # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç O
            game['players']['O'] = request.sid
            game['status'] = 'playing'
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
            socketio.emit('game_start', {'symbol': 'O'}, room=request.sid)
            socketio.emit('board_update', {
                'board': game['board'],
                'current_turn': 'X'
            }, room=game_id)
        else:
            socketio.emit('error', {'message': '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞'}, room=request.sid)

@socketio.on('move')
def handle_move(data):
    game_id = data.get('game_id')
    position = data.get('position')
    symbol = data.get('symbol')
    
    if game_id not in games:
        return
    
    game = games[game_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞
    if (game['current_turn'] != symbol or 
        game['players'][symbol] != request.sid or
        game['board'][position] != ''):
        return
    
    # –î–µ–ª–∞–µ–º —Ö–æ–¥
    game['board'][position] = symbol
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    winner = check_winner(game['board'])
    if winner:
        socketio.emit('game_over', {'winner': winner}, room=game_id)
        # –ê–≤—Ç–æ—Ä–µ—Å—Ç–∞—Ä—Ç
        import time
        time.sleep(3)
        reset_game(game_id)
    elif all(cell != '' for cell in game['board']):
        socketio.emit('game_over', {'winner': 'draw'}, room=game_id)
        time.sleep(3)
        reset_game(game_id)
    else:
        # –ú–µ–Ω—è–µ–º —Ö–æ–¥
        game['current_turn'] = 'O' if symbol == 'X' else 'X'
        socketio.emit('board_update', {
            'board': game['board'],
            'current_turn': game['current_turn']
        }, room=game_id)

@socketio.on('restart')
def handle_restart(data):
    game_id = data.get('game_id')
    if game_id in games:
        reset_game(game_id)
        socketio.emit('board_update', {
            'board': games[game_id]['board'],
            'current_turn': 'X'
        }, room=game_id)

def check_winner(board):
    # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–æ–±–µ–¥—ã
    lines = [
        [0,1,2], [3,4,5], [6,7,8],  # rows
        [0,3,6], [1,4,7], [2,5,8],  # columns
        [0,4,8], [2,4,6]            # diagonals
    ]
    
    for a, b, c in lines:
        if board[a] and board[a] == board[b] and board[a] == board[c]:
            return board[a]
    return None

def reset_game(game_id):
    if game_id in games:
        games[game_id]['board'] = ['', '', '', '', '', '', '', '', '']
        games[game_id]['current_turn'] = 'X'

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"üöÄ –û–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    socketio.run(app, host='0.0.0.0', port=port, debug=False)
